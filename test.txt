let mut num1 = ComplexNumber::cartesian(21.0, 19.0);
let num2 = ComplexNumber::cartesian(10.0, 17.0);

let start1 = Instant::now();
let i_i1 = ComplexNumber::exp_of(&num1, &num1);
let duration1 = start1.elapsed();

let start3 = Instant::now();
num1.exp(&num2);
let duration3 = start3.elapsed();



println!("i^i is {:#?}. \nTime Elapsed = {:?}", i_i1, duration1);
println!("i^i is {:#?}. \nTime Elapsed = {:?}", &num1, duration3);







// fn create_mandelbrot(array: &mut Array3<u8>) {
//   let max_iterations = 50;
//   println!("{:?}", array.axis_iter(ndarray::Axis(2)));
  
//   for y in 0..720 {
//     for x in 0..1080 {
//       let c = ComplexNumber::cartesian(1.5 * (((x as f64) - 960.0)/960.0) - 1.0, 1.5 * ((540.0 - (y as f64))/540.0));
//       let mut z = ComplexNumber::cartesian(0.0, 0.0);

//       let mut num_of_iter = max_iterations;
//       for i in 0..max_iterations {
//         iterate(&mut z, &c);
//         if z.modulus() > 20.0 {
//           num_of_iter = i ;
//         }
//       };

//       let factor = ((num_of_iter as f64) / (max_iterations as f64)).powf(0.5);
//       let color = 255 - (factor * 255.0) as u8;
//       array[[y, x, 0]] = color;
//       array[[y, x, 1]] = color;
//       array[[y, x, 2]] = color;
//     }
//   }
// }